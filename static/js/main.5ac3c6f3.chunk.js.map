{"version":3,"sources":["Components/Checkbox.tsx","Components/CharCount.tsx","Components/FrequentChars.tsx","Components/InputWithHighlight.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Checkbox","value","setter","title","type","checked","onChange","e","target","CharCount","char","count","topFive","displayChar","className","FrequentChars","text","useState","Set","setTopFive","stringInOrder","setStringInOrder","charCount","setCharCount","useEffect","seen","map","removedDuplicates","c","has","push","add","arr","Object","entries","sort","a","b","top","slice","forEach","InputWithHighlight","setText","App","filteredText","setFilteredText","isCaseSensitve","setIsCaseSensitive","isAlph","setIsAlph","filtered","replace","toLowerCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ac3c6f3.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\n\ninterface Props {\n    value: boolean,\n    setter: React.Dispatch<React.SetStateAction<boolean>>;\n    title: string;\n}\n\nexport default function Checkbox({ value, setter, title }: Props): ReactElement {\n    return (\n        <div>\n            <label>\n                <input\n                    type=\"checkbox\"\n                    checked={value}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        setter(e.target.checked);\n                    }}\n                />\n                {title}\n            </label>\n        </div>\n    );\n}\n","import { ReactElement } from 'react';\n\ninterface Props {\n    char: string,\n    count: number;\n    topFive: boolean;\n}\n\nexport default function CharCount({ char, count, topFive }: Props): ReactElement {\n    let displayChar = char;\n\n    if (char === ' ') displayChar = 'space';\n    if (char === '\\n') displayChar = 'enter';\n\n    return (\n        <div className={'charCountContainer'}>\n            <div className={`charCount ${topFive ? 'topFive' : null}`}>\n                {displayChar}: {count}\n            </div>\n        </div>\n    );\n}\n","import { ReactElement, useEffect, useState } from 'react';\nimport { CharMap } from '../Types';\nimport CharCount from './CharCount';\n\ninterface Props {\n    text: string;\n}\n\nexport default function FrequentChars({ text }: Props): ReactElement {\n    const [topFive, setTopFive] = useState<Set<string>>(new Set<string>());\n    const [stringInOrder, setStringInOrder] = useState<string[]>([]);\n    const [charCount, setCharCount] = useState<CharMap>({});\n\n    //update our charmap when text changes\n    useEffect(() => {\n        let seen = new Set<string>();\n        let map: CharMap = {};\n\n        //we could keep this as a string, but I'd like to use the map method in render\n        let removedDuplicates: string[] = [];\n        for (let c of text) {\n            if (map[c]) {\n                map[c]++;\n            } else {\n                map[c] = 1;\n            }\n\n            if (seen.has(c)) continue;\n\n            removedDuplicates.push(c);\n            seen.add(c);\n        }\n        setStringInOrder(removedDuplicates);\n        setCharCount(map);\n        //so far this is O(n), just a linear scan and we removed duplicates\n        //with this, we can use this string for our order in which we print\n\n        //now we are left with a top k elements problem\n        let arr = Object.entries(map);\n        //sort by the amount of occurences\n        arr.sort((a, b) => {\n            return b[1] - a[1];\n        });\n\n        //we can use a set here because we don't care about the order of the top 5\n        //we just want this to see if a char is in the top 5 per the instructions\n        let top = new Set<string>();\n        arr.slice(0, 5).forEach(char => top.add(char[0]));\n        setTopFive(top);\n        //this is O(n log n) due to the sort\n\n        //O(n log n) + O(n) = O(n log n)\n        //pretty performant to me!\n    }, [text]); //don't add charmap as a dependency here, infinite render\n\n    return (\n        <div>\n            {stringInOrder.map(char =>\n                <CharCount\n                    char={char}\n                    count={charCount[char]}\n                    topFive={topFive.has(char)}\n                    key={char}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\n\n\ninterface Props {\n    text: string,\n    setText: React.Dispatch<React.SetStateAction<string>>;\n}\n\nexport default function InputWithHighlight({ text, setText }: Props): ReactElement {\n    return (\n        <div className=\"inputcontainer\">\n            <TextareaAutosize\n                className=\"appinput\"\n                value={text}\n                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => {\n                    setText(e.target.value);\n                }}\n            />\n        </div>\n    );\n}\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Checkbox from './Components/Checkbox';\nimport FrequentChars from './Components/FrequentChars';\nimport InputWithHighlight from './Components/InputWithHighlight';\n\nfunction App() {\n  /*\n  Since the app is very simple, we will handle our main state changes here and pass it down\n  */\n  const [text, setText] = useState(\"\");\n  const [filteredText, setFilteredText] = useState(\"\");\n  const [isCaseSensitve, setIsCaseSensitive] = useState(true);\n  const [isAlph, setIsAlph] = useState(false);\n\n  useEffect(() => {\n    let filtered = text;\n\n    if (isAlph) {\n      filtered = filtered.replace(/[^A-Za-z]/gi, '');\n    }\n    if (!isCaseSensitve) {\n      filtered = filtered.toLowerCase();\n    }\n\n    setFilteredText(filtered);\n  }, [text, isCaseSensitve, isAlph]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        <h1>\n          Spy Tool\n        </h1>\n\n        <Checkbox\n          value={isCaseSensitve}\n          setter={setIsCaseSensitive}\n          title=\"Case Sensitive?\"\n        />\n\n        <Checkbox\n          value={isAlph}\n          setter={setIsAlph}\n          title=\"Only alphabet?\"\n        />\n      </div>\n\n      <InputWithHighlight\n        text={text}\n        setText={setText}\n      />\n\n      <FrequentChars\n        text={filteredText}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}